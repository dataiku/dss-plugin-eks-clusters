name: Build and create pre-release for the EKS cluster plugin

on:
  workflow_dispatch:
    inputs:
      target:
        description: 'Commit hash or branch to release (optional, defaults to the current branch)'
        required: false
      skip_linter:
        description: 'Skip the linter? (use true to skip)'
        required: false
        default: 'false'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    outputs:
      build_warning: ${{ steps.set_warning.outputs.cache_nvidia_config_failure }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.target || github.ref }}

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y make
        sudo apt-get install -y jq

    - uses: chartboost/ruff-action@v1
      if: ${{ inputs.skip_linter != 'true' || inputs.skip_linter !=  'True' || inputs.skip_linter != 'TRUE' }}

    - name: Retrieve plugin info
      id: plugin_info
      run: |
        id=$(jq -r '.id' plugin.json)
        version=$(jq -r '.version' plugin.json)
        echo "Creating release for plugin '$id' and version '$version'"
        echo "id=$id" >> $GITHUB_OUTPUT
        echo "version=$version" >> $GITHUB_OUTPUT

    - name: Bundle Nvidia GPU driver as fallback
      id: cache_nvidia_configuration
      continue-on-error: true
      run: |
        mkdir -m 777 cache
        wget https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/main/deployments/static/nvidia-device-plugin.yml -P ./cache

    - name: Check for failure in non-critical step
      id: set_warning
      run: |
        if [ "${{ steps.cache_nvidia_configuration.outcome }}" == "failure" ]; then
          echo "::warning::Non-critical step failed: Caching the Nvidia GPU driver step failed. It is not required for the plugin to function but is used as a fallback."
          echo "cache_nvidia_config_failure=true" >> $GITHUB_OUTPUT
        else
          echo "cache_nvidia_config_failure=false" >> $GITHUB_OUTPUT
        fi

    - name: Compile plugin into archive
      run: make plugin

    - name: Create GitHub pre-release and include the plugin archive as asset
      uses: ncipollo/release-action@v1
      with:
        tag: "v${{ steps.plugin_info.outputs.version }}"
        commit: ${{ inputs.target || github.ref }}
        artifacts: "./dist/dss-plugin-${{ steps.plugin_info.outputs.id }}-${{ steps.plugin_info.outputs.version }}.zip"
        artifactContentType: application/zip
        token: ${{ secrets.GITHUB_TOKEN }}
        makeLatest: false
        prerelease: true
        draft: true
        generateReleaseNotes: true
        allowUpdates: true
        updateOnlyUnreleased: true
        artifactErrorsFailBuild: true
        replacesArtifacts: true
